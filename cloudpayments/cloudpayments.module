<?php
require_once('CloudpaymentsAPI.php');
/**
 * @return mixed
 */
function cloudpayments_menu()
{
	$items['cloudpayments/check'] = array(
		'title' => 'Check payment amount',
		'page callback' => 'cloudpayments_check',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['cloudpayments/pay'] = array(
		'title' => 'Payed payment',
		'page callback' => 'cloudpayments_pay',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	$items['cloudpayments/confirm'] = array(
		'title' => 'Сonfirm payment',
		'page callback' => 'cloudpayments_confirm',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	$items['cloudpayments/refund'] = array(
		'title' => 'Refund payment',
		'page callback' => 'cloudpayments_refund',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	// Config page
	$items['admin/config/system/cloudpayments'] = array(
		'title' => t('CloudPayments Settings'),
		'description' => t('CloudPayments Settings.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cloudpayments_admin_settings'),
		'access arguments' => array('access cloudpayments settings'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'cloudpayments.admin.inc',
	);
	return $items;
}

/**
 * Добавляем кнопку оплаты при оформлении заказа
 * @return array
 */
function cloudpayments_uc_payment_method()
{
	$payment_methods = array();
	$icon = theme('image', array(
		'path' => drupal_get_path('module', 'cloudpayments') . '/images/icon_64.jpg',
		'attributes' => array('class' => array('cloudpayments-logo')),
	));
	$display_title = 'CloudPayments<br/>' . $icon;
	$payment_methods['cloudpayments'] = array(
		'name' => t('CloudPayments'),
		'title' => $display_title,
		'desc' => t('Integration with CloudPayments.'),
		'callback' => 'cloudpayments_payment_method_form',
		'weight' => 1,
		'checkout' => TRUE,
	);
	
	return $payment_methods;
}

/**
 * Перекидываем пользователя на страницу заказа после завершения оформления
 * Implements hook_uc_checkout_complete().
 */
function cloudpayments_uc_checkout_complete($order, $account)
{
	uc_cart_empty(uc_cart_get_id());
	drupal_goto("/user/{$order->uid}/orders/{$order->order_id}");
}

/**
 * Кнопка оплаты на странице заказа
 * @param $form
 * @param $form_state
 * @param $order
 * @param $payment_method
 * @return mixed
 */
function cloudpayments_payment_method_form($op, $order, $form = NULL, &$form_state = NULL) {
	if ($op != 'customer-view')	return;
	if ($order->order_status != 'pending') return;
	$iTaxProduct = variable_get('cloudpayments_tax_product',-1);
	$iTaxShipping = variable_get('cloudpayments_tax_shipping',-1);
	$sFieldPhone = $order->billing_phone;
	$currency_code = $order->currency;
	$amount = 0;
	$aItems = [];
	foreach ($order->products as $iId => $oProduct) {
		if ($iTaxProduct == -2) {
			// берем налог из товара
			$iTax = 0;
			foreach ($order->line_items as $aData) {
				if ($aData['type'] == 'tax') {
					$oTax = $aData['data']['tax'];
					if ($oTax->taxed_product_types[0] == 'product') {
						$iTax = $oTax->rate * 100;
						break;
					}
				}
			}
		} elseif ($iTaxProduct == -1) {
			$iTax = '';
		} else {
			$iTax = $iTaxProduct;
		}
		
		$aItem = [
			"label" => $oProduct->title,
			"price" => $oProduct->price * (1 + ($iTaxProduct == -2 ? $iTax / 100 : 0)),
			"quantity" => $oProduct->qty,
			"amount" => $oProduct->price * (1 + ($iTaxProduct == -2 ? $iTax / 100 : 0)) * $oProduct->qty,
			"vat" => $iTax
		];
		
		array_push($aItems, $aItem);
		$amount += $aItem['amount'];
	}
	foreach($order->line_items as $aData) {
		if ($iTaxShipping == -2) {
//			// берем налог из настроек
			$iTax = 0;
			foreach ($order->line_items as $aD) {
				if ($aD['type'] == 'tax') {
					$oTax = $aD['data']['tax'];
					if ($oTax->taxed_line_items[0] == 'shipping') {
						$iTax = $oTax->rate * 100;
						break;
					}
				}
			}
		} elseif ($iTaxShipping == -1) {
			$iTax = '';
		} else {
			$iTax = $iTaxShipping;
		}
//		pr($aData);
		if ($aData['type'] == 'shipping') {
			$aItem = array(
				'label' => $aData['title'],
				'price' => $aData['amount'] * (1 + ($iTaxShipping == -2 ? $iTax / 100 : 0)),
				'quantity' => 1,
				'amount' => $aData['amount'] * (1 + ($iTaxShipping == -2 ? $iTax / 100 : 0)),
				'vat' =>$iTax,
			);
			array_push($aItems, $aItem);
			$amount += $aItem['amount'];
		}
	}
	
	$form['#method'] = 'POST';
	$form['#action'] = '#cloudpayments';
	$form['success'] = array(
		'#id' => 'success',
		'#type' => 'hidden',
		'#name' => 'success',
		'#value' => 1,
	);
	$form['submit'] = array(
		'#id' => 'cloudpayments_button',
		'#type' => 'submit',
		'#name' => 'success',
		'#value' => t('Pay via CloudPayments'),
	);
	$sPublicId= variable_get('cloudpayments_public_id','');
	$sScheme = variable_get('cloudpayments_scheme','sms');
	$sSendCheck = variable_get('cloudpayments_send_check','sms');
	$sLocalizaton = variable_get('cloudpayments_localization','ru_RU');
	$iTaxSystem = variable_get('cloudpayments_tax_system',0);
	$form['message'] = [
			'#type' => 'fieldset',
			'#value' => '<script src="https://widget.cloudpayments.ru/bundles/cloudpayments"></script>
						<script>
							var oBut = document.getElementById("cloudpayments_button");
							oBut.onclick = function () {
								var widget = new cp.CloudPayments({language:"'.$sLocalizaton.'"});
								widget.'.($sScheme == 'sms' ? 'charge' : 'auth').'({ // options
										publicId: "'.$sPublicId.'",  //id из личного кабинета
										description: "'.t('Order payment').' №'.$order->order_id.'", //назначение
										amount: '.$amount.', //сумма
										currency: "'.$currency_code.'", //валюта
										invoiceId: "'.$order->order_id.'", //номер заказа  (необязательно)
										accountId: "'.$order->primary_email.'", //идентификатор плательщика (необязательно)
										data: {
											order_number: "'.$order->order_id.'", //произвольный набор параметров
											phone: "'.$sFieldPhone.'",
											cloudPayments: '. ($sSendCheck == 'yes' ? '{ customerReceipt: { Items:'.json_encode($aItems).', taxationSystem: '.$iTaxSystem.', email: "'.$order->primary_email.'", phone: "'.$sFieldPhone.'"} }' : "{}") . '
										}
									},
									function (options) { // success
										oBut.parentNode.removeChild(oBut);
										window.setTimeout(function(){ window.location.href = "";}, 3000);
									},
									function (reason, options) { // fail
										//действие при неуспешной оплате
									});
								return false;
							};
						</script>
						<style>.form-wrapper{ display: none; }</style>
						'
	];

	return $form;
}

function cloudpayments_check()
{
	$oOrder = uc_order_load($_POST['InvoiceId']);
	$fAmount = uc_order_get_total($oOrder);
	$oCloudPayments = new CloudPaymentsAPI();
	$oCloudPayments->Check($fAmount);
}

function cloudpayments_pay()
{
	$oCloudPayments = new CloudPaymentsAPI();
	$oCloudPayments->Pay();
}

function cloudpayments_confirm()
{
	$oCloudPayments = new CloudPaymentsAPI();
	$oCloudPayments->Confirm();
}

function cloudpayments_refund()
{
	$oCloudPayments = new CloudPaymentsAPI();
	$oCloudPayments->Refund();
}

/**
 * Отправка уведомлений CloudPayments при обновлении статусов заказа
 * @param $op
 * @param $order
 * @param $arg2
 * @return bool
 */
function cloudpayments_uc_order($op, $order, $arg2) {
	switch ($op) {
		case 'load':
			break;
		case 'total':
			break;
		case 'can_update':
			break;
		case 'update':
			if (!$order->order_id) return false;
			if (!isset($_POST['status'])) return;
			$oOrder = uc_order_load($order->order_id);
			$fAmount = uc_order_get_total($oOrder);
			$oCloudPayments = new CloudPaymentsAPI();
			$iTransactionId = db_select('cloudpayments_transaction', 'ct')
				->fields('ct', ['transaction_id'])
				->condition('ct.order_id', $order->order_id)
				->execute()
				->fetchField();
			if (!$iTransactionId) return false;
			$sScheme = variable_get('cloudpayments_scheme');
			if ($sScheme == 'dms' && $_POST['status'] == variable_get('cloudpayments_status_cp_confirmed')) {
				drupal_set_message(t('Confirmation request has been sent to the payment system'));
				$oCloudPayments->MakeRequest('payments/confirm', [
					'TransactionId' => $iTransactionId,
					'Amount' => $fAmount
				]);
				// возвращаем предыдущий статус заказа если запрос из админки, а не по хуку
				// не получилось сделать, т.к. обновление происходит ранее
			} elseif ($_POST['status'] == variable_get('cloudpayments_status_refund')) {
				drupal_set_message(t('Refund request has been sent to the payment system'));
				$oCloudPayments->MakeRequest('payments/refund', [
					'TransactionId' => $iTransactionId,
					'Amount' => $fAmount
				]);
				// возвращаем предыдущий статус заказа если запрос из админки, а не по хуку
				// не получилось сделать, т.к. обновление происходит ранее
			} elseif ($sScheme == 'dms' && $_POST['status'] == variable_get('cloudpayments_status_canceled')) {
				drupal_set_message(t('Cancel request has been sent to the payment system'));
				$oCloudPayments->MakeRequest('payments/void', [
					'TransactionId' => $iTransactionId
				]);
			}
			break;
	}
}